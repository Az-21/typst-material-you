using M3Parser.Model;
using System.Text;

namespace M3Parser.Io;
internal static class Output
{
  private const string OutputFolder = "Output";
  internal static void WriteThemes(in List<M3Theme> themes, in string version)
  {
    // Ensure output folder exists
    bool outputExists = Path.Exists(OutputFolder);
    if (!outputExists) { Directory.CreateDirectory(OutputFolder); }

    // Write
    Console.WriteLine("\nGenerating typst theme(s):");
    foreach (var theme in themes)
    {
      // Location
      string typstFilename = theme.Filename.ToLowerInvariant() + ".typ";
      string path = Path.Combine(OutputFolder, typstFilename);

      // Content
      string typstThemeVariable = GenerateTypstThemeVariable(theme.M3ThemePairs, version);
      File.WriteAllText(path, typstThemeVariable);

      // Print status
      PrintGeneratedFilename(path);
    }

  }

  private static string GenerateTypstThemeVariable(in List<M3ThemePair> themePairs, in string version)
  {
    // Generate theme file contents
    StringBuilder sb = new();
    // Version info
    sb.AppendLine(@"// Autogenerated using https://github.com/Az-21/typst-material-you");
    sb.AppendLine($"// Version: {version}");
    sb.AppendLine();

    // Light values
    GenerateVariable(sb, themePairs, "light");
    sb.AppendLine();

    // Dark values
    GenerateVariable(sb, themePairs, "dark");

    return sb.ToString();
  }

  private static void GenerateVariable(StringBuilder sb, in List<M3ThemePair> themePairs, in string brightness)
  {
    sb.AppendLine($"#let m3{brightness} = (");
    foreach (M3ThemePair themePair in themePairs)
    {
      string name = themePair.ColorName;
      string hex = themePair.ColorHex;

      string redundantTerm = brightness + '-'; // light-
      string nameWithoutBrightness = name.Replace(redundantTerm, String.Empty); // primary

      if (name.StartsWith(brightness)) { sb.AppendLine($"""  {nameWithoutBrightness}: rgb("{hex}"),"""); }
    }
    sb.AppendLine(")");
  }

  private static void PrintGeneratedFilename(in string path) => Console.WriteLine($"  - {path} [ Done ]");
}
